unit main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ComObj, Vcl.Grids, DateUtils, inifiles,
  IdAntiFreezeBase, Vcl.IdAntiFreeze, IdBaseComponent, IdComponent,
  IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient,
  IdSMTPBase, IdSMTP, IdMessage;

type
  TMainForm = class(TForm)
    BtnConf: TButton;
    BtnSend: TButton;
    IdSMTP: TIdSMTP;
    IdMessage: TIdMessage;
    procedure BtnSendClick(Sender: TObject);
    function FormatingDateTime(s: string): TDateTime;
    procedure BtnConfClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;
  ChanelsFile: string; // Имя файла выгрузки каналов
  Mail_server: string; // Имя почтового сервера
  Mail_port: string; // Порт почтового сервера
  User_name: string; // Имя пользователя
  Password: string; // Пароль
  Theme: string; // Тема письма
  Senders_address: string; // Адрес отправителя
  Senders_name: string; // Имя отпарвителя
  Recipient_address: string; // Адрес получателя

implementation

{$R *.dfm}

uses config;

procedure TMainForm.BtnConfClick(Sender: TObject);
begin
   if (not Assigned(ConfigForm)) then   // проверка существования Формы (если нет, то
       ConfigForm:=TConfigForm.Create(Self);    // создание Формы)
   ConfigForm.Show;
end;

procedure TMainForm.BtnSendClick(Sender: TObject);
const
  xlCellTypeLastCell = $0000000B;
var
  ExcelApp, ExcelSheet: OLEVariant;
  ChannelsSrc: Variant;
  ChannelsResult: array of array of string;
  x, y: Integer;
  a, i, j, N: Integer;
  s: string;
begin
  N:=1;
  a:=1;
  s:='';
  // создание OLE-объекта Excel
  ExcelApp := CreateOleObject('Excel.Application');

  // открытие книги Excel
  ExcelApp.Workbooks.Open(ChanelsFile);

  // открытие листа книги
  ExcelSheet := ExcelApp.Workbooks[1].WorkSheets[1];

  // выделение последней задействованной ячейки на листе
  ExcelSheet.Cells.SpecialCells(xlCellTypeLastCell).Activate;

  // получение значений размера выбранного диапазона
  x := ExcelApp.ActiveCell.Row;
  y := ExcelApp.ActiveCell.Column;

  // присвоение массиву диапазона ячеек на листе
  ChannelsSrc := ExcelApp.Range['A1', ExcelApp.Cells.Item[X, Y]].Value;

  // закрытие книги и очистка переменных
  ExcelApp.Quit;
  ExcelApp := Unassigned;
  ExcelSheet := Unassigned;
  // Ищем выключенные каналы и если время выключения больше N дней пишем в результирующий массив
  SetLength(ChannelsResult,x,3);
  j:=0;
  for i := 2 to x do
    begin
      if ChannelsSrc[i,4] = 'OFF' then
        if DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])) >= N then
          begin
            ChannelsResult[j,0]:=ChannelsSrc[i,1];
            if ChannelsSrc[i,3] = 'M' then ChannelsResult[j,1]:='Основной канал';
            if ChannelsSrc[i,3] = 'B' then ChannelsResult[j,1]:='Резервный канал';
            ChannelsResult[j,2]:=inttostr(DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])));
            j:=j+1;
          end;

    end;


    for a := 0 to j-1 do s:=s+ChannelsResult[a,0]+' | '+ChannelsResult[a,1]+' | '+ChannelsResult[a,2]+sLineBreak;

    ShowMessage(s);

    ChannelsResult:=NIL;

    // Отправка письма

    //выбираем SMTP сервер.
    IdSMTP.Host:= 'smtp.yandex.ru';
    //логин (для некоторых необходимо писать с доменом).
    IdSMTP.Username:= 'моя почта@yandex.ru';
    //пароль от почты.
    IdSMTP.Password:= 'мой пароль от почты';
    //порт, рекомендуем использовать 587.
    IdSMTP.Port:=587;

    //Тема письма.
    IdMessage.Subject:= 'Тема письма';
    //Адрес получателя.
    IdMessage.Recipients.EMailAddresses:= 'почта получателя@mail.ru';
    //ваш email с которого идёт отправка.
    IdMessage.From.Address:= 'моя почта@yandex.ru';
    //Текст который вы ходите послать.
    IdMessage.Body.Text:= 'Привет привет' ;
    //Электронная подпись (Имя).
    IdMessage.From.Name:= 'Александр';
    // Для рус. языка
    IdMessage.ContentType:='text/html; charset=windows-1251';
    IdMessage.ContentTransferEncoding:='8bit';
    //соединяемся
    IdSMTP.connect;
    //отправляем
    if idSmtp.Connected = TRUE then
      IdSMTP.Send(IdMessage);
    //отсоединяемся
    IdSMTP.Disconnect;

end;


function TMainForm.FormatingDateTime(s: string): TDateTime;
var s2: string;
x: integer;
begin
  s2:='';
  s2:=s2+s[9];
  s2:=s2+s[10];
  s2:=s2+'.';
  s2:=s2+s[6];
  s2:=s2+s[7];
  s2:=s2+'.';
  s2:=s2+s[1];
  s2:=s2+s[2];
  s2:=s2+s[3];
  s2:=s2+s[4];
  s2:=s2+' ';
  for x := 12 to 19 do s2:=s2+s[x];
  result:=StrToDateTime(s2);
end;


procedure TMainForm.FormCreate(Sender: TObject);
var
  Ini: Tinifile;
begin
  ChanelsFile := '';
  if FileExists('config.ini') then
    begin
      Ini:=TiniFile.Create(extractfilepath(paramstr(0))+'config.ini');
      ChanelsFile:=Ini.ReadString('Chanels','File_name','');
      Mail_server:=Ini.ReadString('Mail','ServerAddress','');
      Mail_port:=Ini.ReadString('Mail','ServerPort','');
      User_name:=Ini.ReadString('Mail','UserName','');
      Password:=Ini.ReadString('Mail','UserPassword','');
      Theme:=Ini.ReadString('Mail','Theme','');
      Senders_address:=Ini.ReadString('Mail','SenderAddress','');
      Senders_name:=Ini.ReadString('Mail','SenderName','');
      Recipient_address:=Ini.ReadString('Mail','RecipientAddress','');
      Ini.Free;
    end;

end;

end.
