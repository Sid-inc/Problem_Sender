unit main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ComObj, Vcl.Grids, DateUtils, inifiles,
  IdAntiFreezeBase, Vcl.IdAntiFreeze, IdBaseComponent, IdComponent,
  IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient,
  IdSMTPBase, IdSMTP, IdMessage, IdIOHandler, IdIOHandlerStack, IdSSL, IdSSLOpenSSL, IdCustomTransparentProxy, IdSocks,
  IdHTTP, idAttachment, IdAttachmentFile, IdIOHandlerSocket;

type
  TMainForm = class(TForm)
    BtnConf: TButton;
    BtnSend: TButton;
    IdSMTP: TIdSMTP;
    IdMessage: TIdMessage;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    IdHTTP1: TIdHTTP;
    procedure BtnSendClick(Sender: TObject);
    function FormatingDateTime(s: string): TDateTime;
    procedure BtnConfClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    function Send_Email(Theme, Recipient, Email_Message: string): Boolean;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

function Cryptor(s, c: string):string;

var
  MainForm: TMainForm;
  ChanelsFile: string; // Имя файла выгрузки каналов
  Mail_server: string; // Имя почтового сервера
  Mail_port: string; // Порт почтового сервера
  User_name: string; // Имя пользователя
  Password: string; // Пароль
  Theme: string; // Тема письма
  Senders_address: string; // Адрес отправителя
  Senders_name: string; // Имя отпарвителя
  Recipient_address: string; // Адрес получателя
  ChanelsDays: string; // Количество дней считаемых проблемными

implementation

{$R *.dfm}

uses config;

procedure TMainForm.BtnConfClick(Sender: TObject);
begin
   if (not Assigned(ConfigForm)) then   // проверка существования Формы (если нет, то
       ConfigForm:=TConfigForm.Create(Self);    // создание Формы)
   ConfigForm.Show;
end;

procedure TMainForm.BtnSendClick(Sender: TObject);
const
  xlCellTypeLastCell = $0000000B;
var
  ExcelApp, ExcelSheet: OLEVariant;
  ChannelsSrc: Variant;
  ChannelsResult: array of array of string;
  a, i, j, x, y, sr1, sr2: Integer;
  tmparr: array [1..3] of string;
  s: String;
begin
//  s:='';
  // создание OLE-объекта Excel
  ExcelApp := CreateOleObject('Excel.Application');

  // открытие книги Excel
  ExcelApp.Workbooks.Open(ChanelsFile);

  // открытие листа книги
  ExcelSheet := ExcelApp.Workbooks[1].WorkSheets[1];

  // выделение последней задействованной ячейки на листе
  ExcelSheet.Cells.SpecialCells(xlCellTypeLastCell).Activate;

  // получение значений размера выбранного диапазона
  x := ExcelApp.ActiveCell.Row;
  y := ExcelApp.ActiveCell.Column;

  // присвоение массиву диапазона ячеек на листе
  ChannelsSrc := ExcelApp.Range['A1', ExcelApp.Cells.Item[X, Y]].Value;

  // закрытие книги и очистка переменных
  ExcelApp.Quit;
  ExcelApp := Unassigned;
  ExcelSheet := Unassigned;
  // Ищем выключенные каналы и если время выключения больше N дней пишем в результирующий массив
  SetLength(ChannelsResult,x,3);
  j:=0;
  for i := 2 to x do
    begin
      if ChannelsSrc[i,4] = 'OFF' then
        if DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])) >= strtoint(ChanelsDays) then
          begin
            ChannelsResult[j,0]:=ChannelsSrc[i,1];
            if ChannelsSrc[i,3] = 'M' then ChannelsResult[j,1]:='Основной канал';
            if ChannelsSrc[i,3] = 'B' then ChannelsResult[j,1]:='Резервный канал';
            ChannelsResult[j,2]:=inttostr(DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])));
            j:=j+1;
          end;

    end;
   if j<>0 then
    begin
      // Сортировка массива по убыванию по количеству дней не в сети
      if j>0 then
       for sr1 := 0 to j do
        for sr2 := 0 to j-sr1 do
          if ChannelsResult[sr2,2] < ChannelsResult[sr2+1, 2] then
            begin
              tmparr[1]:=ChannelsResult[sr2,0];
              tmparr[2]:=ChannelsResult[sr2,1];
              tmparr[3]:=ChannelsResult[sr2,2];
              ChannelsResult[sr2,0]:=ChannelsResult[sr2+1,0];
              ChannelsResult[sr2,1]:=ChannelsResult[sr2+1,1];
              ChannelsResult[sr2,2]:=ChannelsResult[sr2+1,2];
              ChannelsResult[sr2+1, 0]:=tmparr[1];
              ChannelsResult[sr2+1, 1]:=tmparr[2];
              ChannelsResult[sr2+1, 2]:=tmparr[3];
            end;
      // Отправка письма
      // Формируем письмо
      s:='<table border="1"><tr><th><b>Название ОО</b></th><th><b>Тип канала</b></th><th><b>Количество дней не в сети</b></th></tr>';
      for a := 0 to j-1 do
        begin
          s:=s+'<tr>';
          s:=s+'<td>'+ChannelsResult[a,0]+'</td><td>'+ChannelsResult[a,1]+'</td><td>'+ChannelsResult[a,2]+'</td>';
          s:=s+'</tr>'+sLineBreak;
        end;
      s:=s+'</table>';
      ChannelsResult:=NIL;
      if (Send_Email(Theme, Recipient_address, s)) then ShowMessage('Письмо по каналам - ОК')
        else ShowMessage('Письмо по каналам - ERROR');
    end
    else ShowMessage('Отправлять нечего, нет каналов для текущих условий отбора');

end;


function Cryptor(s, c: string): string;
var
  I, AddKey, StartKey: Integer;
begin
StartKey := 744;
AddKey := 5;
Result := '';
//Шифрование
if c = 'crypt' then
  for I := 1 to Length(s) do
    begin
      if AddKey > 9 then AddKey:=5;
      Result := Result + CHAR(Byte(s[I]) xor (StartKey shr AddKey));
      AddKey:=AddKey+1;
    end;
// Дешифрование
if c = 'decrypt' then
  for I := 1 to Length(s) do
    begin
      if AddKey > 9 then AddKey:=5;
      Result := Result + CHAR(Byte(s[I]) xor (StartKey shr AddKey));
      AddKey:=AddKey+1;
    end;
end;

function TMainForm.FormatingDateTime(s: string): TDateTime;
var s2: string;
x: integer;
begin
  s2:='';
  s2:=s2+s[9];
  s2:=s2+s[10];
  s2:=s2+'.';
  s2:=s2+s[6];
  s2:=s2+s[7];
  s2:=s2+'.';
  s2:=s2+s[1];
  s2:=s2+s[2];
  s2:=s2+s[3];
  s2:=s2+s[4];
  s2:=s2+' ';
  for x := 12 to 19 do s2:=s2+s[x];
  result:=StrToDateTime(s2);
end;


procedure TMainForm.FormCreate(Sender: TObject);
var
  Ini: Tinifile;
begin
  ChanelsFile := '';
  if FileExists('config.ini') then
    begin
      Ini:=TiniFile.Create(extractfilepath(paramstr(0))+'config.ini');
      ChanelsFile:=Ini.ReadString('Chanels','File_name','');
      Theme:=Ini.ReadString('Chanels','Theme','');
      Recipient_address:=Ini.ReadString('Chanels','RecipientAddress','');
      ChanelsDays:=Ini.ReadString('Chanels','ChanelsDays','');
      Mail_server:=Ini.ReadString('Mail','ServerAddress','');
      Mail_port:=Ini.ReadString('Mail','ServerPort','');
      User_name:=Ini.ReadString('Mail','UserName','');
      Password:=Cryptor(Ini.ReadString('Mail','UserPassword',''), 'decrypt');
      Senders_address:=Ini.ReadString('Mail','SenderAddress','');
      Senders_name:=Ini.ReadString('Mail','SenderName','');
      Ini.Free;
    end;

end;

function TMainForm.Send_Email(Theme, Recipient, Email_Message: string): Boolean;
var
IdSSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;
begin
  try
    //выбираем SMTP сервер.
    IdSMTP.Host:= Mail_server;
    //порт
    IdSMTP.Port:= StrToInt(Mail_port);
 {
    if ConfigForm.SSLCheckBox.Checked then   //Если нужно использовать SSL
      begin
  }      IdSMTP.AuthType:=satDefault;
        IdSSLIOHandlerSocketOpenSSL:= TIdSSLIOHandlerSocketOpenSSL.Create(nil);
        IdSSLIOHandlerSocketOpenSSL.Destination := IdSMTP.Host+':'+IntToStr(IdSMTP.Port);
        IdSSLIOHandlerSocketOpenSSL.Host := IdSMTP.Host;
        IdSSLIOHandlerSocketOpenSSL.Port := IdSMTP.Port;
        IdSSLIOHandlerSocketOpenSSL.DefaultPort := 0;
        IdSSLIOHandlerSocketOpenSSL.SSLOptions.Method := sslvTLSv1_2;
        IdSSLIOHandlerSocketOpenSSL.SSLOptions.SSLVersions := [sslvSSLv3];
        IdSSLIOHandlerSocketOpenSSL.SSLOptions.Mode := sslmUnassigned;
        IdSMTP.IOHandler := IdSSLIOHandlerSocketOpenSSL;
        IdSMTP.UseTLS := utUseImplicitTLS;
  {    end;
  }
    //логин (для некоторых необходимо писать с доменом).
    IdSMTP.Username:= User_name;
    //пароль от почты.
    IdSMTP.Password:= Password;
    //Тема письма.
    IdMessage.Subject:= Theme;
    //Адрес получателя.
    IdMessage.Recipients.EMailAddresses:= Recipient;
    //ваш email с которого идёт отправка.
    IdMessage.From.Address:= Senders_address;
    //Вставляем текст письма
    IdMessage.Body.Text:= Email_Message;
    //Электронная подпись (Имя).
    IdMessage.From.Name:= Senders_name;
    // Для рус. языка
    IdMessage.ContentType:='text/html; charset=windows-1251';
    IdMessage.ContentTransferEncoding:='8bit';
    //соединяемся
    IdSMTP.connect;
    //отправляем
    if idSmtp.Connected = TRUE then
      IdSMTP.Send(IdMessage);
    //отсоединяемся
    IdSMTP.Disconnect;
    result:=true;
  except
    result:=false;
  end;
  IdSMTP.Free;
end;

end.
