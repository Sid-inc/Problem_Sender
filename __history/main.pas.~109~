unit main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, ComObj, Vcl.Grids, DateUtils;

type
  TMainForm = class(TForm)
    BtnConf: TButton;
    BtnSend: TButton;
    procedure BtnSendClick(Sender: TObject);
    function FormatingDateTime(s: string): TDateTime;
    procedure BtnConfClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

uses config;

procedure TMainForm.BtnConfClick(Sender: TObject);
begin
   if (not Assigned(Config) then   // проверка существовани€ ‘ормы (если нет, то
       ConfigForm:=TConfigForm.Create(Self);    // создание ‘ормы)
   ConfigForm.Show;
end;

procedure TMainForm.BtnSendClick(Sender: TObject);
const
  xlCellTypeLastCell = $0000000B;
var
  ExcelApp, ExcelSheet: OLEVariant;
  ChannelsSrc: Variant;
  ChannelsResult: array of array of string;
  x, y: Integer;
  d: TDateTime;
  a, i, j, N: Integer;
  s: string;
begin
  N:=1;
  a:=1;
  s:='';
  // создание OLE-объекта Excel
  ExcelApp := CreateOleObject('Excel.Application');

  // открытие книги Excel
  ExcelApp.Workbooks.Open('E:\Develop\Delphi\onlineoo_export_OMG_smolensk-3.XLS');

  // открытие листа книги
  ExcelSheet := ExcelApp.Workbooks[1].WorkSheets[1];

  // выделение последней задействованной €чейки на листе
  ExcelSheet.Cells.SpecialCells(xlCellTypeLastCell).Activate;

  // получение значений размера выбранного диапазона
  x := ExcelApp.ActiveCell.Row;
  y := ExcelApp.ActiveCell.Column;

  // присвоение массиву диапазона €чеек на листе
  ChannelsSrc := ExcelApp.Range['A1', ExcelApp.Cells.Item[X, Y]].Value;

  // закрытие книги и очистка переменных
  ExcelApp.Quit;
  ExcelApp := Unassigned;
  ExcelSheet := Unassigned;
  // »щем выключенные каналы и если врем€ выключени€ больше N дней пишем в результирующий массив
  SetLength(ChannelsResult,x,3);
  j:=0;
  for i := 2 to x do
    begin
      if ChannelsSrc[i,4] = 'OFF' then
        if DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])) >= N then
          begin
            ChannelsResult[j,0]:=ChannelsSrc[i,1];
            if ChannelsSrc[i,3] = 'M' then ChannelsResult[j,1]:='ќсновной канал';
            if ChannelsSrc[i,3] = 'B' then ChannelsResult[j,1]:='–езервный канал';
            ChannelsResult[j,2]:=inttostr(DaysBetween(Now, FormatingDateTime(ChannelsSrc[i,6])));
            j:=j+1;
          end;

    end;


    for a := 0 to j-1 do s:=s+ChannelsResult[a,0]+' | '+ChannelsResult[a,1]+' | '+ChannelsResult[a,2]+sLineBreak;

    ShowMessage(s);


    ChannelsResult:=NIL;
end;


function TMainForm.FormatingDateTime(s: string): TDateTime;
var s2: string;
x: integer;
begin
  s2:='';
  s2:=s2+s[9];
  s2:=s2+s[10];
  s2:=s2+'.';
  s2:=s2+s[6];
  s2:=s2+s[7];
  s2:=s2+'.';
  s2:=s2+s[1];
  s2:=s2+s[2];
  s2:=s2+s[3];
  s2:=s2+s[4];
  s2:=s2+' ';
  for x := 12 to 19 do s2:=s2+s[x];
  result:=StrToDateTime(s2);
end;


end.
